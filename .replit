modules = ["python-3.11", "nodejs-20", "postgresql-16"]

[nix]
channel = "stable-24_05"
packages = ["libev", "libsodium"]

[workflows]
runButton = "Project"

[[workflows.workflow]]
name = "Project"
mode = "parallel"
author = "agent"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Combined Server"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Frontend Dev"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Backend Server"

[[workflows.workflow]]
name = "Combined Server"
author = "agent"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "node server.js"
waitForPort = 8080

[[workflows.workflow]]
name = "Frontend Dev"
author = "agent"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "cd frontend && npm run dev"
waitForPort = 3000

[[workflows.workflow]]
name = "Backend Server"
author = "agent"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "cd backend && pip install -r requirements.txt && python -c \"from app import app; app.run(host='0.0.0.0', port=5000, debug=True)\""
waitForPort = 5000

[deployment]
run = ["sh", "-c", "cd backend && pip install -r requirements.txt || pip install flask flask-sqlalchemy flask-socketio flask-cors python-dotenv jwt web3 ipfshttpclient pynacl psycopg2-binary && python -m flask run --host=0.0.0.0 --port=5000"]

[[ports]]
localPort = 3000
externalPort = 3000

[[ports]]
localPort = 5000
externalPort = 80

[[ports]]
localPort = 8080
externalPort = 8080
